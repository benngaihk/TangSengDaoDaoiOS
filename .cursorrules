# TangSengDaoDaoiOS - Cursor AI 编程规则

## 项目概述
- **项目名称**: 唐僧叨叨 (TangSengDaoDaoiOS)
- **类型**: iOS原生即时通讯应用
- **架构**: 模块化架构 + MVC模式
- **主要语言**: Objective-C (主要) + Swift (部分)
- **最低支持**: iOS 11.0+
- **目标版本**: iOS 12.0+

## 技术栈和版本

### 核心技术
- **Xcode版本**: 建议使用最新稳定版本
- **iOS部署目标**: 11.0 (Podfile中配置)
- **平台支持**: iOS 12.0+ (Podfile platform配置)
- **开发团队ID**: H8PU463W68

### 依赖管理
- **工具**: CocoaPods
- **配置文件**: Podfile, Podfile.lock
- **工作空间**: TangSengDaoDaoiOS.xcworkspace (必须使用workspace)

### 核心依赖库
```ruby
# 网络层
pod 'AFNetworking', '~> 4.0.1'
pod 'SocketRocket', '~> 0.6.0'
pod 'Socket.IO-Client-Swift', '~> 15.2.0'

# 异步编程
pod 'ReactiveObjC', '~> 3.1.1'
pod 'PromiseKit/CorePromise', '~> 6.18.1'

# 数据库
pod 'FMDB/SQLCipher', '~> 2.7.5'
pod 'SQLCipher', '~> 4.5.4'

# UI框架
pod 'Masonry', '~> 1.1.0'
pod 'AsyncDisplayKit', '~> 1.0' (自定义fork)
pod 'MJRefresh', '~> 3.7.5'
pod 'MBProgressHUD', '~> 1.1.0'

# 图片处理
pod 'SDWebImage', '~> 5.9.5'
pod 'SDWebImageWebPCoder', '~> 0.6.1'
pod 'YYImage/WebP', '~> 1.0.4' (自定义fork)
pod 'TOCropViewController', '~> 2.5.5'

# 多媒体
pod 'lottie-ios', '~> 2.5.3'
pod 'librlottie', '~> 0.1.7' (自定义fork)

# 其他工具
pod 'SSZipArchive', '~> 2.2.3'
pod 'Aspects', '~> 1.4.1'
```

### 自定义模块 (本地Pods)
```ruby
pod 'WuKongIMSDK', :path => './Modules/WuKongIMiOSSDK'    # IM核心SDK
pod 'WuKongBase', :path => './Modules/WuKongBase'         # 基础工具包
pod 'WuKongLogin', :path => './Modules/WuKongLogin'       # 登录模块
pod 'WuKongContacts', :path => './Modules/WuKongContacts' # 联系人模块
pod 'WuKongDataSource', :path => './Modules/WuKongDataSource' # 数据源
pod 'WuKongWorkplace', :path => './Modules/WuKongWorkplace'   # 工作台模块
```

## 代码规范

### 命名规范
1. **类名前缀**: 统一使用 `WK` 前缀
   ```objc
   @interface WKViewController : UIViewController
   @interface WKManager : NSObject
   ```

2. **文件命名**: 
   - Objective-C: `WKClassName.h/.m`
   - Swift: `WKClassName.swift`
   - 模块前缀: `WuKong` (如 WuKongBase)

3. **变量命名**: 驼峰命名法
   ```objc
   @property(nonatomic, strong) NSString *channelID;
   @property(nonatomic, assign) BOOL isLogined;
   ```

### 文件组织结构
```
Modules/
├── WuKongBase/           # 基础模块
│   ├── Classes/
│   │   ├── Sections/     # 业务模块
│   │   ├── Services/     # 服务层
│   │   └── Vendor/       # 第三方组件
│   └── Assets/           # 资源文件
├── WuKongContacts/       # 联系人模块
├── WuKongWorkplace/      # 工作台模块
└── ...
```

### 头文件注释格式
```objc
//
//  WKClassName.h
//  ModuleName
//
//  Created by [作者] on [日期].
//
```

### 类注释规范
```objc
/**
 * 类功能描述
 * 
 * @since [版本号]
 */
@interface WKClassName : NSObject
```

### 方法注释规范
```objc
/**
 * 方法功能描述
 *
 * @param parameter1 参数1描述
 * @param parameter2 参数2描述
 * @return 返回值描述
 */
- (ReturnType)methodName:(ParameterType)parameter1 parameter2:(ParameterType)parameter2;
```

## 模块化架构规范

### 模块定义
1. **模块协议**: 实现 `WKModuleProtocol`
```objc
@interface WKExampleModule : WKBaseModule
@end

@implementation WKExampleModule
- (NSString *)moduleId {
    return @"WuKongExample";
}
@end
```

2. **模块注册**: 使用 `@WKModule` 宏自动注册
```objc
@WKModule(WKExampleModule)
@implementation WKExampleModule
```

3. **模块管理器**: 
   - Objective-C: `WKModuleManager`
   - Swift: `WKSwiftModuleManager`

### 单例模式规范
使用项目定义的宏：
```objc
// .h文件
singtonInterface

// .m文件  
singtonImplement(ClassName)
```

### 数据模型规范
继承 `WKModel` 基类：
```objc
@interface WKExampleModel : WKModel
@property(nonatomic, copy) NSString *name;
@end
```

## 编程最佳实践

### 1. 内存管理
- 使用 `weak` 避免循环引用
- block中使用 `weakify/strongify` 或 `__weak/__strong`
```objc
__weak typeof(self) weakSelf = self;
dispatch_async(dispatch_get_main_queue(), ^{
    __strong typeof(weakSelf) strongSelf = weakSelf;
    // 使用strongSelf
});
```

### 2. 线程安全
- UI操作必须在主线程
- 数据库操作考虑线程安全
- 使用 `NSLock` 或 GCD 保护共享资源

### 3. 错误处理
- 网络请求使用 PromiseKit 链式调用
- 统一错误处理机制
```objc
[WKAPIClient.sharedClient GET:@"api/endpoint" parameters:@{}].then(^(id response) {
    // 处理成功响应
}).catch(^(NSError *error) {
    // 处理错误
});
```

### 4. 性能优化
- 图片加载使用 SDWebImage
- 列表使用 AsyncDisplayKit 优化
- 合理使用缓存机制

## UI开发规范

### 1. 布局
- 优先使用 Masonry 进行自动布局
- 支持深色模式，使用 `WKApp.shared.config` 获取主题色

### 2. 颜色和字体
```objc
// 使用配置中的颜色
UIColor *themeColor = WKApp.shared.config.themeColor;
UIColor *bgColor = WKApp.shared.config.backgroundColor;

// 使用配置中的字体
UIFont *defaultFont = [WKApp.shared.config appFontOfSize:16];
```

### 3. 导航栏
使用统一的导航栏样式：
```objc
[WKApp.shared.config setThemeStyleNavigation:self.navigationController.navigationBar];
```

## 网络请求规范

### 1. API调用
使用 `WKAPIClient` 统一管理：
```objc
[WKAPIClient.sharedClient GET:@"endpoint" parameters:@{} model:WKModel.class].then(^(WKModel *model) {
    // 处理结果
});
```

### 2. 文件上传
```objc
[WKAPIClient.sharedClient fileUpload:@"upload" data:data progress:^(NSProgress *progress) {
    // 上传进度
} completeCallback:^(id responseObject, NSError *error) {
    // 上传完成
}];
```

## 数据库规范

### 1. 数据库操作
使用 `WKKitDB` 封装的方法：
```objc
// 插入数据
[WKDB.sharedDB insertIntoTable:@"table_name" dic:@{@"key": @"value"}];

// 查询数据
NSArray *results = [WKDB.sharedDB QueryTable:@"table_name" param:WKModel.class whereFormat:@"WHERE id=?", @(123)];
```

### 2. 数据库加密
项目使用 SQLCipher 进行数据库加密

## 国际化支持

### 支持语言
- 中文简体 (zh_CN)
- 中文繁体 (zh_TW)  
- 英文 (en)

### 使用方式
```objc
NSString *localizedString = WKApp.shared.config.langue;
```

## 构建配置

### Xcode设置
- `ENABLE_BITCODE = NO`
- `IPHONEOS_DEPLOYMENT_TARGET = 11.0`
- `EXCLUDED_ARCHS[sdk=iphonesimulator*] = arm64`

### 权限配置
应用需要以下权限：
- 相机访问 (NSCameraUsageDescription)
- 麦克风访问 (NSMicrophoneUsageDescription)
- 相册访问 (NSPhotoLibraryUsageDescription)
- 位置访问 (NSLocationUsageDescription)
- 通讯录访问 (NSContactsUsageDescription)

### Bundle ID和URL Scheme
- Bundle ID: 根据Info.plist配置
- URL Scheme: `botgate://` (用于应用间跳转)

## 测试规范

### 单元测试
- 测试文件后缀: `Tests.m`
- 使用 XCTest 框架

### 集成测试
- 使用 FBSnapshotTestCase 进行UI测试

## 代码提交规范

### Commit Message格式
```
<type>(<scope>): <subject>

<body>

<footer>
```

类型说明：
- `feat`: 新功能
- `fix`: 修复Bug
- `docs`: 文档修改
- `style`: 代码格式修改
- `refactor`: 代码重构
- `test`: 测试相关
- `chore`: 构建过程或工具变更

## 常用工具类

### 时间处理
```objc
[WKTimeTool getTimeStringAutoShort2:[NSDate date] mustIncludeTime:YES];
```

### 中文排序
```objc
[WKChineseSort sortAndGroup:array key:@"name" finish:^(bool isSuccess, NSMutableArray *unGroupedArr, NSMutableArray *sectionTitleArr, NSMutableArray<NSMutableArray*>* sortedObjArr) {
    // 排序完成
}];
```

## AI编程注意事项

### 1. 严格遵循现有架构
- 新功能必须遵循模块化架构
- 使用现有的基类和工具类
- 保持代码风格一致性

### 2. 性能考虑
- 避免在主线程进行耗时操作
- 合理使用缓存
- 图片加载考虑内存优化

### 3. 兼容性
- 保持向下兼容
- 适配深色模式
- 考虑不同屏幕尺寸

### 4. 安全性
- 敏感数据加密存储
- 网络请求使用HTTPS
- 用户隐私保护

---

**重要提醒**: 本项目使用工作空间(TangSengDaoDaoiOS.xcworkspace)进行开发，请勿直接使用项目文件(TangSengDaoDaoiOS.xcodeproj)打开。所有开发工作必须基于现有的模块化架构进行。 